<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rest.app.comm.service.impl.QualityControlMapper">
	
	<select id="getProduct" resultType="com.rest.app.comm.vo.QualityControlVO">
		select p.* , e.employee_name
 		  from product p
  		  join employee e
    		on (p.emp_code = e.emp_code)
    	 where product_code = #{productCode}
	</select>
	<select id="productExcel" resultType="com.rest.app.comm.vo.QualityControlVO">
		select p.* , e.employee_name
 		  from product p
  		  join employee e
    		on (p.emp_code = e.emp_code)
    	
	</select>
	
	<!-- 제품코드,제품명,제품규격 List(모달창) -->
	<select id="getProductList" resultType="com.rest.app.comm.vo.QualityControlVO">
		SELECT *
 		  FROM product
 		 ORDER BY product_code
	</select>
	
	<!-- 제품에대한 고객사코드/고객사명 list -->
	<select id="getCompany" resultType="com.rest.app.comm.vo.QualityControlVO">
	SELECT  Distinct a.product_code
       	   ,LISTAGG(c.company_code, ',') WITHIN GROUP(ORDER BY c.company_code) OVER(PARTITION BY a.product_code) as comp_code
       	   ,LISTAGG(c.company_name, ',') WITHIN GROUP(ORDER BY c.company_code) OVER(PARTITION BY a.product_code) as comp_name
  	  FROM company c
  	  JOIN (SELECT Distinct p.product_code, o.company_code
          	  FROM product p
              JOIN orders o
                ON (p.product_code = o.product_code)) a
        ON c.company_code = a.company_code       
 	 WHERE a.product_code = #{productCode}
	</select>
	
	<!-- 수정 -->
	<update id="updateProduct" parameterType="com.rest.app.comm.vo.QualityControlVO">
	UPDATE product
	   SET product_name =#{productName}, p_img=#{pImg}, qc_img=#{qcImg}
	 WHERE product_code = #{product_code}  
	</update>
	
	<!-- 규격  리스트 -->
	<select id="getCodeList" resultType="com.rest.app.comm.vo.QualityControlVO">
		select code_id,code
  	  from COMTCCMMNDETAILCODE
 	 where code_id ='R_STD'
	</select>
	<!-- 단위 리스트 -->
	<select id="getUnitList" resultType="com.rest.app.comm.vo.QualityControlVO">
		select code_id, code
  	  from COMTCCMMNDETAILCODE
 	 where code_id ='R_UNIT'
	</select>
	<!-- 사원 리스트  -->
	<select id="getEmpList" resultType="com.rest.app.comm.vo.QualityControlVO">
		select emp_code, employee_name
		  from employee
	</select>
	
	<!-- merge insert and update -->
	<insert id="insertProduct" parameterType="com.rest.app.comm.vo.QualityControlVO">
		MERGE INTO product p   
    	USING DUAL
       	   ON (p.product_code = #{productCode})  
        WHEN MATCHED THEN
        UPDATE SET p.product_name = #{productName},  
    			   p.std_id = 'R_STD', p.std_no = #{stdNo},
				   p.unit_id = 'R_UNIT', p.unit_no = #{unitNo},
  		           p.emp_code = #{empCode} 	
  		           <if test ="qcImg != null and qcImg !=''">
		 			,p.qc_img= #{qcImg}
				   </if>
				   <if test ="useAt != null" >
				   ,p.use_at = #{useAt}
				   </if>
				   <if test ="useAt == null">
				   ,p.use_at = NVL(#{useAt},'N')
				   </if>
				   
									   
		WHEN NOT MATCHED THEN
        INSERT (p.product_code ,p.product_name, p.qc_img, p.std_id, p.std_no,unit_id, p.unit_no,p.emp_code, p.use_at)  
        VALUES (#{productCode}, #{productName}, #{qcImg},'R_STD', #{stdNo},
				'R_UNIT', #{unitNo}, #{empCode}, NVL(#{useAt},'N'))
        
	</insert>
	
	<!-- update product -->
	<update id="updateProdcut" parameterType="com.rest.app.comm.vo.QualityControlVO">
		update product
		   set product_code = #{productCode}, product_name= #{productName},
		  	   qc_img= #{qcImg},
		  	   std_id = 'R_STD', std_no = #{stdNo},
		  	   unit_id = 'R_UNIT', unit_no = #{unitNo},
		  	   emp_code = #{empCode}, use_at = #{useAt}
		 where product_code = #{productCode}
	</update>
	
	<!-- delete product -->
	<delete id="deleteProduct" parameterType="com.rest.app.comm.vo.QualityControlVO">
		delete from product
		 where product_code = #{productCode}
	</delete>
	
	<!-- max productCode -->
	<select id="maxProductCode" resultType="int">
		select max(product_code) 
		  from product
	</select>
</mapper>