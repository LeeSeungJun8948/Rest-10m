<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rest.app.mat.service.impl.MaterialMapper">

	<select id="getMatList" resultType="MatVO">
		SELECT m.material_code, m.material_name, cm.code_nm as mat_nm
		FROM material m LEFT JOIN COMTCCMMNDETAILCODE cm
		ON m.mat_id = cm.code_id and m.mat_no = cm.code
		ORDER BY m.material_code
	</select>
	
	<select id="getMatInfo" resultType="MatVO" parameterType="MatVO">
		SELECT m.material_code, m.material_name, mat_no, cm.code_nm as mat_nm, m.company_code, c.company_name, unit_id, unit_no, save_stock, min_stock, max_stock, month_stock 
		FROM material m LEFT JOIN company c 
		ON m.company_Code = c.company_Code
		LEFT JOIN COMTCCMMNDETAILCODE cm
		ON m.mat_no = cm.code and m.mat_id = cm.code_id
		WHERE m.material_code = #{materialCode}
	</select>
	
	<!-- 자재 구분, 단위 들고오기 -->
	<select id="getMatNo" resultType="MatVO">
		SELECT code as mat_no, 
      			code_nm as mat_nm 
		FROM COMTCCMMNDETAILCODE 
		WHERE code_id = 'R_MAT'
	</select>
	
	<select id="getUnitNo" resultType="MatVO">
		SELECT code as unit_no, 
        		code_nm as unit_nm 
		FROM COMTCCMMNDETAILCODE 
		WHERE code_id = 'R_UNIT'
	</select>
	
	<select id="saveMat" parameterType="MatVO" resultType="int">
		SELECT count(*) 
		FROM material 
		WHERE material_code = #{materialCode}
	</select>
	
	<update id="udtMat" parameterType="MatVO">
		UPDATE material 
		SET material_name = #{materialName}, mat_no = #{matNo}, unit_no = #{unitNo}, company_code =  #{companyCode}
		, MIN_STOCK =  #{minStock} , MAX_STOCK =  #{maxStock}, SAVE_STOCK =  #{saveStock}, MONTH_STOCK =  #{monthStock}
		WHERE material_code = #{materialCode}
	</update>
	
	<!-- 새 자재를 추가할때 code 값 불러오기 -->
	<select id="newMatCode" resultType="MatVO">
		SELECT max(material_code) + 1 as  material_code
		FROM material 
	</select>
	
	<insert id="istMat" parameterType="MatVO" >
		insert into material(material_code, material_name, company_code, unit_id, unit_no, mat_id, mat_no, save_stock, min_stock, max_stock, month_stock)
		values(#{materialCode}, #{materialName}, #{companyCode}, 'R_UNIT', #{unitNo}, 'R_MAT', #{matNo}, #{saveStock}, #{minStock}, #{maxStock},  #{monthStock})
	</insert>
	
	<delete id="matDel" parameterType="MatVO">
		DELETE FROM material
		WHERE material_code = #{materialCode}
	</delete>
	
	<!-- 발주 -->
	<select id="getInorderList" resultType="InorderVO"  parameterType="InorderVO">
	
		SELECT inorder_code, inorder_date, material_code, 
			f_findMatName(material_code) as material_name,
			f_findCompName(company_code) as company_name,
			(select max(io_date) from inout where inorder_code = inorder.inorder_code) as in_date,
			inorder_count,
			nvl((select sum(io_volume) from inout where inorder_code = inorder.inorder_code),0) as in_count,
			inorder_count - nvl((select sum(io_volume) from inout where inorder_code = inorder.inorder_code),0) as yet_count,
			comments
			
		FROM inorder
		
		<where>

			trunc(inorder_date) BETWEEN #{startDate} AND #{endDate} 
			
			<if test="companyCode != null and companyCode != ''">
				AND company_code = #{companyCode}
			</if>	
	
			<if test="materialCode != null and materialCode != ''">
				AND material_code = #{materialCode}
			</if>	

		</where>
			
		<if test="sort != null and sort != ''">
			ORDER BY ${sort} 
			<if test='sort.equals("inorder_date")'>
				desc
			</if>
		</if> 	
		
	</select>
	
	<!-- 입출고/정산입출고 한방에 -->
	<select id="getMatInoutList" resultType="InoutVO"  parameterType="InoutVO">
	
		SELECT io_code, 
				io_date, 
				material_code, 
				F_FINDMATNAME(material_code) as material_name, 
		        (SELECT unit_no FROM material WHERE material_code = inout.material_code) as unit_no,
		        inorder_code, 
		        io_volume, 
		        unit_price, 
		        io_volume * unit_price as price, 
		        lot_no,
		        F_FIND_MAT_STOCK(inout.material_code) as stock,
        		(SELECT f_findCompName(company_code) FROM inorder WHERE inorder_code = inout.inorder_code) as company_name,
     		  	(SELECT company_code FROM inorder WHERE inorder_code = inout.inorder_code) as company_code,
     		  	process_code,
     		  	(SELECT process_name FROM process WHERE process_code = inout.process_code) as process_name,
     		  	comments
		FROM inout 
		
		<where>
		
			trunc(io_date) BETWEEN #{startDate} AND #{endDate}
			
			<if test="inoutNo != null and inoutNo != ''">
				AND inout_no = #{inoutNo}  
			</if> 

			<if test="companyCode != null and companyCode != ''">
				AND (SELECT company_code FROM inorder WHERE inorder_code = inout.inorder_code) = #{companyCode}
			</if>	
	
			<if test="materialCode != null and materialCode != ''">
				AND material_code = #{materialCode}
			</if>	
			
			<if test="matNo != null and matNo != ''">
				AND mat_no = #{matNo}			
			</if>			
			
			<if test="processCode != null and processCode != ''">
				AND process_code = #{processCode}
			</if>
		</where>
		
		<if test="sort != null and sort != ''">
			ORDER BY ${sort} 
			<if test='sort.equals("io_date")'>
				desc
			</if>	
		</if> 	
	</select>
	
	<!-- 입출고 행을 추가할때 code 값 불러오기 -->
	<select id="getNewIoCode" resultType="InoutVO">
		SELECT max(io_code) + 1  as io_code FROM inout
	</select>
	
	<!-- 발주번호 입력시 자재정보 불러오기 -->
	<select id="getMatInfoForIn" resultType="InoutVO" parameterType="InoutVO" >
		SELECT material_code, F_FINDMATNAME(material_code) AS material_name, unit_no, 
				F_FIND_MAT_STOCK(material.material_code) as stock
		FROM material 
		WHERE material_code = (SELECT material_code FROM inorder WHERE inorder_code = #{inorderCode})
	</select>
	
	<!-- 입출고 인설트 -->
	<insert id="istInout" parameterType="InoutVO">
		INSERT INTO inout(io_code, io_date, io_volume, unit_price, material_code, lot_no, inorder_code, inout_no, process_code, comments) 
		VALUES(#{ioCode}, #{ioDate}, #{ioVolume}, #{unitPrice}, #{materialCode}, #{lotNo}, #{inorderCode}, #{inoutNo}, #{processCode}, #{comments})
	</insert>
	
	<!-- 입출고 업데이트 -->
	<update id="udtInout" parameterType="InoutVO">
		UPDATE inout 
		SET io_date = #{ioDate}, inorder_code = #{inorderCode}, material_code = #{materialCode}, io_volume = #{ioVolume}, unit_price = #{unitPrice}
					,lot_no = #{lotNo}, process_code = #{processCode}, comments = #{comments}
		WHERE io_code = #{ioCode}
	</update>
	
	<!-- 입출고 삭제 -->
	<delete id="delInout" parameterType="InoutVO">
		DELETE FROM inout WHERE io_code = ${ioCode}
	</delete>
	
	<!-- 출고관리, 자재코드 입력시 자재정보 불러오기 -->
	<select id="getMatInfoForOut" resultType="InoutVO" parameterType="InoutVO" >
		SELECT F_FINDMATNAME(material_code) AS material_name, 
				unit_no,
				F_FIND_MAT_STOCK(material_code) as stock
		FROM material 
		WHERE material_code = #{materialCode}
	</select>
	
	<!-- 출고관리, 자재코드 입력시 사용공정 리스트 출력 -->
	<select id="getProcessList" parameterType="SelectListVO" resultType="SelectListVO">
		SELECT process_code, 		      
				(SELECT process_name FROM process WHERE process_code = bom.process_code) AS process_name
		FROM bom 
		WHERE material_code = #{materialCode}
	</select>
	
	<!-- 자재로트별 재고 -->
	<!--  이거 왜 만든거지?? 기억안남.. 
	<select id="whatthe" resultType="InoutVO" parameterType="InoutVO">
		SELECT io.lot_no, 
	        io.material_code, 
	        m.material_name, 
	        m.unit_no,
	        io.unit_price,
	        f_mat_count(io.lot_no) AS stock
		FROM inout io join material m
		ON (io.material_code = m.material_code) AND f_mat_count(io.lot_no) > 0
	</select>
	-->
	
	<!--  자재 로트별 재고  -->
	<select id="getMatLotStock" resultType="InoutVO" parameterType="InoutVO">
	
		SELECT  io.lot_no,
		        MAX(io.material_code) as material_code,
		        F_FIND_MAT_NAME(max(io.material_code)) as material_name,
		        F_MAT_COUNT(io.lot_no) AS lot_stock,
		        MAX(m.unit_no) as unit_no,
		        (SELECT max(io_date) FROM inout WHERE lot_no = io.lot_no and inout_no in ('03', '04')) as io_date,
		        (SELECT max(unit_price) FROM inout WHERE lot_no = io.lot_no) as unit_price
		FROM inout io join material m 
		ON (io.material_code = m.material_code) 
		GROUP BY io.lot_no
		
<!-- 
		 TRUNC( (SELECT MAX(io_date) 
						FROM inout 
						WHERE lot_no = io.lot_no and inout_no in ('03', '04'))
					) NOT BETWEEN #{startDate} AND #{endDate} 
				OR
				(SELECT MAX(io_date) 
				 FROM inout 
				 WHERE lot_no = io.lot_no 
						AND inout_no in ('03', '04')
				) IS NULL 
 -->			
		<if test="materialCode != null and materialCode!=''">
			HAVING MAX(io.material_code) = #{materialCode} 
		</if>
			
		<if test='exceptZeroStock != null and exceptZeroStock.equals("true")'>
			<if test="materialCode != null and materialCode!=''">
				AND 
			</if>
			<if test="materialCode == null or materialCode==''">
				HAVING 
			</if>
			F_MAT_COUNT(io.lot_no) > 0
		</if>
	</select>
	
	<!-- 정산입출고 셀렉트  -->
	<select id="getMatAdjustList" parameterType="InoutVO" resultType="InoutVO">
		SELECT io_code, 
		        lot_no,  
		        io_date, 
		        io_volume, 
		        material_code,
		        (SELECT unit_no FROM material WHERE material_code = inout.material_code) as unit_no, 
		        f_find_mat_name(material_code) as material_name, 
		        (select max(unit_price) from inout i where lot_no = inout.lot_no and inout_no = '01' ) as unit_price,
		        inout_no, 
		        comments,
		        F_MAT_COUNT(lot_no) AS lot_stock, 
		        (select max(unit_price) from inout i where lot_no = inout.lot_no and inout_no = '01' ) * io_volume 
		        as stock <!-- 걍 변수이름만 사용한거지 재고가 아니라 총액임 -->
		FROM inout
		WHERE inout_no NOT IN ('01','02','05') 
				AND TRUNC(io_date) BETWEEN #{startDate} AND #{endDate} 
		<if test='inoutNo != null and inoutNo != ""'>
			AND inout_no = #{inoutNo}
		</if>
		<if test='materialCode != null and materialCode != ""'>
			AND material_code = #{materialCode}
		</if>
	</select>
	
	<!-- 정산입출고 인설트 -->
	<insert id="istMatAdjust" parameterType="InoutVO">
		INSERT INTO inout(io_code, io_date, material_code, io_volume, lot_no, inout_no, comments)
		VALUES(#{ioCode}, #{ioDate}, #{materialCode}, #{ioVolume}, #{lotNo}, #{inoutNo}, #{comments})
	</insert>
	
	<!-- 정산입출고 딜리트 -->
	<insert id="delMatAdjust" parameterType="InoutVO">
		DELETE FROM inout 
		WHERE io_code = #{ioCode}
	</insert>
	
	<select id="getInoutNo" parameterType="InoutVO" resultType="InoutVO">
		SELECT inout_no
		FROM inout
		WHERE io_code = #{ioCode}
	</select>
	
	<!-- 정산입출고 업데이트 -->
	<insert id="udtMatAdjust" parameterType="InoutVO">
		UPDATE inout
		SET io_volume = #{ioVolume}, inout_no = #{inoutNo}, comments = #{comments}
		WHERE io_code = #{ioCode}
	</insert>
	
	<!-- 모달 -->
	<!-- 자재 리스트 모달 -->
	<select id="getMatListModal" resultType="SelectListVO" parameterType="SelectListVO">
		SELECT material_code, 
				material_name, 
				(SELECT code_nm FROM COMTCCMMNDETAILCODE WHERE code_id = material.mat_id and code = material.mat_no) as matNm
		FROM material
		
		<where>
			<if test="keyword != null and keyword !=''">
				<if test='!searchCondition.equals("mat_no")'>
					upper(${searchCondition}) like '%'||upper(#{keyword})||'%' 
				</if>
				<if test='searchCondition.equals("mat_no")'>
					${searchCondition} in (SELECT code 
											FROM COMTCCMMNDETAILCODE 
											WHERE code_id = 'R_MAT' 
												AND upper(code_nm) like '%' || upper(#{keyword}) || '%' ) 
				</if>
			</if>
		</where>
		ORDER BY material_code
	</select>
	
	<!-- 공정리스트 모달 -->
	<select id="getProcListModal" resultType="SelectListVO" parameterType="SelectListVO">
		SELECT process_code, 
				process_name 
		FROM process
		
		<where>
			<if test="keyword != null and keyword !=''">
				${searchCondition} like '%'||#{keyword}||'%' 
			</if>
		</where>
		ORDER BY process_code 
	</select>
	
	<!-- 재고 0 이상 자재별 로트 리스트 모달 -->
	<select id="getMatLotListModal" parameterType="SelectListVO" resultType="SelectListVO">
		SELECT lot_no, 
        		(SELECT NVL(SUM(IO_VOLUME),0) FROM INOUT WHERE INOUT_NO IN (01,03,05) and lot_no = i.lot_no) 
          		- (SELECT NVL(SUM(IO_VOLUME),0) FROM INOUT WHERE INOUT_NO IN (02,04) and lot_no = i.lot_no) as lot_stock, 
          		MIN(io_date) as ioDate
		FROM inout i 
		WHERE material_code = #{materialCode} 
      			AND (SELECT NVL(SUM(IO_VOLUME),0) FROM INOUT WHERE INOUT_NO IN (01,03,05) and lot_no = i.lot_no) 
            		- (SELECT NVL(SUM(IO_VOLUME),0) FROM INOUT WHERE INOUT_NO IN (02,04) and lot_no = i.lot_no) > 0
		GROUP BY lot_no
		ORDER BY MIN(io_date)
	</select>
	
	<!-- 업체 목록 모달 -->
	<select id="getCompListModal" parameterType="SelectListVO" resultType="SelectListVO">
		SELECT company_code, company_name, 
      			(select code_nm from COMTCCMMNDETAILCODE where code_id = comp_id and code = comp_no) as codeNm
		FROM company
		<where>
			<if test="keyword != null and keyword !=''">
				${searchCondition} like '%'||#{keyword}||'%'
			</if>
			<if test="compNo != null and compNo != ''">
				and comp_no = #{compNo}
			</if>
		</where>
		ORDER BY company_code
	</select>
	
	<!-- 제품 리스트 모달 -->
	<select id="getProdListModal" parameterType="SelectListVO" resultType="SelectListVO">
		SELECT product_code, 
				product_name
		FROM product
		
		<where>
			<if test="keyword != null and keyword !=''">
				${searchCondition} like '%'||#{keyword}||'%'
			</if>
		</where>
		ORDER BY product_code
	</select>
	
	<!-- 발주리스트 모달 -->
	<select id="getInorderListModal" parameterType="InorderVO" resultType="InorderVO">
		SELECT inorder_code, 
	        inorder_date, 
	        f_find_comp_name(company_code) as company_name,
	        f_find_mat_name(material_code) as material_name,
	        inorder_count,
	        nvl((select sum(io_volume) from inout where inorder_code = inorder.inorder_code),0) as in_count,
	        inorder_count - nvl((select sum(io_volume) from inout where inorder_code = inorder.inorder_code),0) as yet_count
		FROM inorder
		<where>
			inorder_count - nvl((select sum(io_volume) from inout where inorder_code = inorder.inorder_code),0) > 0 
			<if test="keyword != null and keyword !=''">
			
				<if test='searchCondition.equals("inorder_code")'>
					AND ${searchCondition} like '%'||#{keyword}||'%' 
				</if>
				
				<if test='searchCondition.equals("material_code")'>
					AND material_code IN (SELECT material_code
											FROM material 
											WHERE UPPER(material_name) LIKE '%'|| UPPER(#{keyword}) || '%' )  
				</if>
				
				<if test='searchCondition.equals("company_code")'>
					AND company_code IN (SELECT company_code
											FROM company 
											WHERE UPPER(company_name) LIKE '%'|| UPPER(#{keyword}) || '%' ) 
				</if>
				
			</if>
		</where>
		
		ORDER BY inorder_date
	</select>
</mapper>