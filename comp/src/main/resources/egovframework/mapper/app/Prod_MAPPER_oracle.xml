<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rest.app.prod.service.impl.ProdMapper">
	<!-- 미생산주문 읽기 -->
	<select id="getUnplanOrders" resultType="OrdersVO">
		SELECT DISTINCT 
			o.order_no, o.product_code, TO_CHAR(o.out_date, 'YYYY-MM-DD') out_date,
			o.order_count, o.plan_count,
			o.order_count - o.plan_count unplan_count, p.product_name
		FROM orders o, product p
		WHERE o.order_count != o.plan_count
		AND o.product_code = p.product_code
		AND o.out_date BETWEEN TO_DATE(#{planDtS}, 'YYYY-MM-DD') 
        	AND TO_DATE(#{planDtE}, 'YYYY-MM-DD')
        ORDER BY o.order_no
	</select>
	<!-- 생산계획 -->
	<insert id="insertPlan" parameterType="PlanVO">
		INSERT INTO plan VALUES(
		#{planCode}, #{planName}, #{planDate}, #{comments} 
		)
	</insert>
	<update id="updatePlan" parameterType="PlanVO">
		UPDATE plan SET plan_date = #{planDate}, plan_name = #{planName}, comments = #{comments}
		WHERE plan_code = #{planCode}
	</update>
	<delete id="deletePlan">
		DELETE FROM plan WHERE plan_code = #{planCode}
	</delete>
	<select id="countPlan" resultType="int">
		SELECT count(*)+1 FROM plan 
	</select>
	<select id="searchPlan" resultType="PlanVO">
		SELECT plan_code, plan_name, TO_CHAR(plan_date, 'YYYY-MM-DD') plan_date, comments FROM plan 
		WHERE plan_date BETWEEN TO_DATE(#{searchDtS}, 'YYYY-MM-DD') 
        	AND TO_DATE(#{searchDtE}, 'YYYY-MM-DD')
        ORDER BY plan_code
	</select>
	
	<!-- 세부계획 -->
	<select id="getDetailPlan" resultType="DetailPlanVO">
		SELECT DISTINCT 
			d.deplan_idx, d.plan_code, d.order_no, d.product_code, d.comments, d.plan_count, d.plan_count work_count,
			TO_CHAR(d.work_date, 'YYYY-MM-DD') work_date, p.product_name,
			(SELECT order_count FROM orders WHERE order_no = d.order_no) order_count, 
			(SELECT order_count - plan_count FROM orders WHERE order_no = d.order_no) unplan_count, 
      		(SELECT TO_CHAR(out_date, 'YYYY-MM-DD') FROM orders WHERE order_no = d.order_no) out_date
		FROM detailplan d, product p 
		WHERE d.plan_code = #{planCode}
		AND d.product_code = p.product_code
		ORDER BY d.deplan_idx
	</select>	
	<insert id="insertDetailPlan" parameterType="DetailPlanVO">
		<selectKey resultType="int" keyProperty="deplanIdx" order="BEFORE">
        	SELECT NVL(MAX(deplan_idx),0)+1 FROM detailplan
    	</selectKey>
		INSERT INTO detailplan VALUES(
		#{deplanIdx}, #{planCode},	#{orderNo}, #{productCode}, #{workDate}, #{workCount}, 0, #{comments}
		)
	</insert>
	<update id="updateDetailPlan" parameterType="DetailPlanVO">
		UPDATE detailplan SET work_date = #{workDate}, plan_count = #{workCount}, comments = #{comments} 
		WHERE deplan_idx = #{deplanIdx}
	</update>
	<delete id="deleteDetailPlan">
		DELETE FROM detailplan WHERE deplan_idx = #{deplanIdx}
	</delete>
	<delete id="deleteAllDetailPlan">
		DELETE FROM detailplan WHERE plan_code = #{planCode}
	</delete>
	<select id="viewPlanSearch" resultType="DetailPlanVO">
		SELECT TO_CHAR(p.plan_date, 'YYYY-MM-DD') plan_date, p.plan_name, d.product_code, pr.product_name,
		    d.order_no, c.company_name, TO_CHAR(o.out_date, 'YYYY-MM-DD') out_date,
		    o.order_count, o.plan_count, TO_CHAR(d.work_date,'YYYY-MM-DD') work_date, d.comments
		FROM plan p, detailplan d, product pr, company c, orders o
		WHERE d.product_code = pr.product_code
		  AND p.plan_code = d.plan_code
		  AND d.order_no = o.order_no
		  AND o.company_code = c.company_code
		  <if test="searchDtS != null and searchDtS != '' and searchDtE != null and searchDtE != ''">
		  AND p.plan_date BETWEEN TO_DATE(#{searchDtS}, 'YYYY-MM-DD') 
		  AND TO_DATE(#{searchDtE}, 'YYYY-MM-DD')
		  </if>
		  <if test="companyCode != null and companyCode != ''">
		  AND o.company_code = #{companyCode}
		  </if>
		  <if test="productCode != null and productCode != ''">
		  AND pr.product_code = #{productCode}
		  </if>
		ORDER BY p.plan_date
	</select>

	<!-- 미완료계획 읽기 -->
	<select id="getUnfinPlans" resultType="DetailPlanVO">
		SELECT DISTINCT 
			d.deplan_idx, d.product_code, TO_CHAR(d.work_date, 'YYYY-MM-DD') plan_date, 
			plan.plan_name, d.plan_count, d.pror_count, d.plan_code, TO_CHAR(d.work_date, 'YYYY-MM-DD') work_date,
			d.plan_count - d.pror_count unpror_count, p.product_name
		FROM detailplan d, product p, plan
		WHERE d.plan_count != d.pror_count
		AND plan.plan_code = d.plan_code
		AND d.product_code = p.product_code
		AND d.work_date BETWEEN TO_DATE(#{prorderDtS}, 'YYYY-MM-DD') 
        	AND TO_DATE(#{prorderDtE}, 'YYYY-MM-DD')
        ORDER BY deplan_idx
	</select>
	<!-- 생산지시 -->
	<insert id="insertProrder" parameterType="ProrderVO">
		INSERT INTO prorder VALUES(
		#{prorCode}, #{prorName}, #{prorDate}, #{comments} 
		)
	</insert>
	<update id="updateProrder" parameterType="ProrderVO">
		UPDATE proRder SET pror_date = #{prorDate}, pror_name = #{prorName}, comments = #{comments}
		WHERE pror_code = #{prorCode}
	</update>
	<delete id="deleteProrder">
		DELETE FROM prorder WHERE pror_code = #{prorCode}
	</delete>
	<select id="countPror" resultType="int">
		SELECT count(*)+1 FROM prorder
	</select>
	<select id="searchProrder" resultType="ProrderVO">
		SELECT pror_code, pror_name, TO_CHAR(pror_date, 'YYYY-MM-DD') pror_date, comments FROM prorder 
		WHERE pror_date BETWEEN TO_DATE(#{searchDtS}, 'YYYY-MM-DD') 
        	AND TO_DATE(#{searchDtE}, 'YYYY-MM-DD')
        ORDER BY pror_code
	</select>
	
	<!-- 세부지시 -->
	<select id="getDetailProrder" resultType="DetailProrderVO">
		SELECT DISTINCT 
			d.product_lot, d.pror_code, d.product_code, d.pror_count, d.pror_count work_count, d.comments, d.deplan_idx, 
			TO_CHAR(d.work_date, 'YYYY-MM-DD') work_date, p.product_name,
			(SELECT plan_code FROM detailplan WHERE deplan_idx = d.deplan_idx) plan_code,
			(SELECT plan_name FROM plan, detailplan dp 	WHERE dp.deplan_idx = d.deplan_idx
				AND dp.plan_code = plan.plan_code) plan_name,
			(SELECT plan_count FROM detailplan WHERE deplan_idx = d.deplan_idx) plan_count, 
			(SELECT plan_count - pror_count FROM detailplan WHERE deplan_idx = d.deplan_idx) unpror_count,
      		(SELECT TO_CHAR(work_date, 'YYYY-MM-DD') FROM detailplan WHERE deplan_idx = d.deplan_idx) plan_date
		FROM detailprorder d, product p
		WHERE pror_code = #{prorCode}
		AND d.product_code = p.product_code
		ORDER BY d.product_lot
	</select>	
	<!-- 제품LOT로 정보찾기 -->
	<select id="selectDetailProrder" resultType="DetailProrderVO">
		SELECT d.product_lot, d.pror_code, d.pror_code, d.product_code, TO_CHAR(d.work_date, 'YYYY-MM-DD') work_date,
			d.pror_count work_count, d.comments, p.product_name
		FROM detailprorder d, product p
		WHERE d.product_lot = #{productLot}
		AND d.product_code = p.product_code
	</select>
	<insert id="insertDetailProrder" parameterType="DetailProrderVO">
		INSERT INTO detailprorder VALUES(
		#{productLot}, #{prorCode},	#{productCode}, #{workDate}, #{workCount}, 0, #{comments}, #{deplanIdx}
		)
	</insert>
	<update id="updateDetailProrder" parameterType="DetailProrderVO">
		UPDATE detailprorder SET work_date = #{workDate}, pror_count = #{workCount},
		comments = #{comments} 
		WHERE product_lot = #{productLot}
	</update>
	<delete id="deleteDetailProrder">
		DELETE FROM detailprorder WHERE product_lot = #{productLot}
	</delete>
	<delete id="deleteAllDetailProrder">
		DELETE FROM detailprorder WHERE pror_code = #{prorCode}
	</delete>
	<select id="countDetailPror" resultType="int">
		SELECT count(*)+1 FROM detailprorder
	</select>
	<select id="viewProrderSearch" resultType="DetailProrderVO">
		SELECT TO_CHAR(p.pror_date, 'YYYY-MM-DD') pror_date, d.product_code, pr.product_name,
		  o.order_no, c.company_name, TO_CHAR(o.out_date,'YYYY-MM-DD') out_date, p.pror_name,
		  o.order_count, d.pror_count, TO_CHAR(d.work_date,'YYYY-MM-DD') work_date, d.comments
		FROM detailprorder d, prorder p, product pr, orders o, company c, detailplan dp
		WHERE o.company_code = c.company_code
		  AND d.deplan_idx = dp.deplan_idx
		  AND dp.order_no = o.order_no
		  AND d.product_code = pr.product_code
		  AND d.pror_code = p.pror_code
		 <if test="searchDtS != null and searchDtS != '' and searchDtE != null and searchDtE != ''">
		  AND p.pror_date BETWEEN TO_DATE(#{searchDtS}, 'YYYY-MM-DD') 
		  AND TO_DATE(#{searchDtE}, 'YYYY-MM-DD')
		  </if>
		 <if test="companyCode != null and companyCode != ''">
		  AND o.company_code = #{companyCode}
		  </if>
		  <if test="productCode != null and productCode != ''">
		  AND pr.product_code = #{productCode}
		  </if>
		ORDER BY p.pror_date
	</select>
	
	<select id="ajaxProdSearchModal" parameterType="SelectListVO" resultType="SelectListVO">
		SELECT DISTINCT product_code, product_name 
		FROM product
		<where>
			<if test="keyword != null and keyword !=''">
				${searchCondition} like '%'||#{keyword}||'%'
			</if>
		</where>
		ORDER BY product_code
	</select>
	<select id="ajaxCompSearchModal" parameterType="SelectListVO" resultType="SelectListVO">
		SELECT DISTINCT company_code, company_name 
		FROM company
		<where>
			<if test="keyword != null and keyword !=''">
				${searchCondition} like '%'||#{keyword}||'%'
			</if>
		</where>
		ORDER BY company_code
	</select>
	
	<!-- 제품명찾기 -->
	<select id="findProductName" parameterType="String" resultType="String">
		SELECT product_name FROM product WHERE product_code = #{productCode} 
	</select>
	<!-- 투입자재 -->
	<insert id="insertInputMat" parameterType="InputMatVO">
		<selectKey keyProperty="inputIdx" resultType="int" order="BEFORE">
        	SELECT NVL(MAX(input_idx),0)+1 FROM inputmat
    	</selectKey> 
		INSERT INTO inputMat VALUES(
		#{inputIdx}, #{prorCode}, #{productLot}, #{materialLot}, #{inputCount}, #{comments}, 
		(SELECT MAX(io_code)+1 FROM inout)
		)
	</insert>
	<update id="updateInputMat" parameterType="InputMatVO">
		UPDATE inputMat SET
		input_count = #{inputCount}, comments = #{comments} 
		WHERE input_idx = #{inputIdx}
	</update>
	<delete id="deleteInputMat">
		DELETE FROM inputMat WHERE input_idx = #{inputIdx}
	</delete>
	<delete id="deleteAllInputMat">
		DELETE FROM inputMat WHERE pror_code = #{prorCode}
	</delete>
	<select id="readInputMat" resultType="InputMatVO">
		SELECT DISTINCT 
			m.material_code, m.material_name, #{productLot} product_lot, #{prorCode} pror_code,
			i.lot_no material_lot, F_MAT_COUNT(i.lot_no) material_count,
			NVL((SELECT input_count FROM inputmat WHERE material_lot = i.lot_no 
			AND product_lot=#{productLot}),0) input_count,
          	(SELECT comments FROM inputmat WHERE material_lot = i.lot_no
          		AND product_lot=#{productLot}) comments,
          	(SELECT input_idx FROM inputmat WHERE material_lot = i.lot_no
          		AND product_lot=#{productLot}) input_idx
		FROM material m, inout i, bom b
	 	WHERE m.material_code = i.material_code
	 	AND b.material_code = m.material_code
		AND b.product_code = #{productCode}
		AND (F_MAT_COUNT(i.lot_no) != 0 OR
			NVL((SELECT input_count FROM inputmat WHERE material_lot = i.lot_no 
	   		AND product_lot=#{productLot}),0) != 0) 
		ORDER BY m.material_code, i.lot_no
	</select>
	
	<!-- 작업실적 -->
	<select id="searchWork" resultType="WorkVO">
		SELECT DISTINCT
			w.work_code, w.process_code, TO_CHAR(w.work_date,'YYYY-MM-DD') work_date, w.product_lot, 
			w.emp_code, emp.employee_name, w.product_code, w.work_count, w.error_count, p.process_name, 
			w.start_time, w.end_time, w.error_code, prod.product_name, w.fac_code,
			(SELECT facilities_name FROM facilities WHERE fac_code = w.fac_code) facilities_name,
			(SELECT error_name FROM error WHERE error_code = w.error_code) error_name, d.pror_code
		FROM work w, process p, employee emp, product prod, detailprorder d
		WHERE w.work_date BETWEEN TO_DATE(#{workDtS}, 'YYYY-MM-DD')
        	AND TO_DATE(#{workDtE}, 'YYYY-MM-DD')
		AND w.process_code = p.process_code
		AND w.emp_code = emp.emp_code
		AND w.product_code = prod.product_code
		AND w.product_lot = d.product_lot
		<if test="workDiv != null and workDiv!= ''">
			AND p.process_name = #{workDiv}
		</if>
        ORDER BY work_date
	</select>
	<insert id="insertWork" parameterType="WorkVO">
		INSERT INTO work VALUES(
		#{workCode}, #{workDiv}, #{productLot}, #{workDate}, #{startTime}, #{endTime}, 
		#{empCode},	#{errorCode}, #{productCode}, #{workCount}, #{errorCount}, #{facCode}
		)
	</insert>
	<update id="updateWork" parameterType="WorkVO">
		UPDATE work SET
			work_date = #{workDate}, emp_code = #{empCode}, error_code = #{errorCode}, product_lot = #{productLot},
			error_count = #{errorCount}, work_count = #{workCount}, start_time = #{startTime}, end_time = #{endTime},
			process_code = #{workDiv}, fac_code = #{facCode}
		WHERE work_code = #{workCode}
	</update>
	<delete id="deleteWork">
		DELETE FROM work WHERE work_code = #{workCode}
	</delete>	
	<select id="countWork" resultType="int">
		SELECT COUNT(*)+1 FROM work
	</select>
	
	<select id="searchEmp" resultType="com.rest.app.comm.vo.EmployeeVO">
		SELECT emp_code, dept, auth, employee_name FROM employee
		<where>
			<if test="keyword != null and keyword !=''">
				${searchCondition} like '%'||#{keyword}||'%' 
			</if>
		</where>
		ORDER BY emp_code
	</select>
	<select id="searchError" resultType="com.rest.app.comm.vo.ErrorVO">
		SELECT * FROM error
		<where>
			<if test="keyword != null and keyword !=''">
				${searchCondition} like '%'||#{keyword}||'%' 
			</if>
		</where>
		ORDER BY error_code
	</select>
	<select id="searchFac" resultType="com.rest.app.fac.vo.FacilitiesVO">
		SELECT * FROM facilities
		<where>
			fac_code NOT IN (SELECT fac_code FROM work WHERE end_time IS NULL)
			<if test="keyword != null and keyword !=''">
				AND ${searchCondition} like '%'||#{keyword}||'%' 
			</if>
		</where>
		ORDER BY fac_code
	</select>
	
	<select id="getErrorList" resultType="com.rest.app.prod.vo.ErrorListVO">
		select c.process_name, TO_CHAR(a.work_date, 'YYYY-MM-DD')AS work_date, a.work_count, a.error_count, d.product_code, 
      	d.product_name, a.product_lot, a.work_code, a.error_code
		from work a, process c, product d
		where a.process_code = c.process_code
		and a.product_code = d.product_code	
			<if test = "startDate != null and startDate != '' and endDate != null and endDate != ''">
			AND trunc(work_date) BETWEEN #{startDate} AND #{endDate} 
			</if>
			<if test="productCode != null and productCode != ''">
				AND a.product_code = #{productCode}
			</if>	
	</select>
</mapper>